/**
 * Copyright 2017 TENKIV, INC.

 Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the
 following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
 disclaimer in the documentation and/or other materials provided with the distribution.

 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
 products derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
apply plugin: 'maven'
apply plugin: 'signing'

if (isReleaseBuild())
    println 'RELEASE BUILD'
else
    println 'DEBUG BUILD'

// This should only be true if you are wanting to upload your own artifact and have the prerequisite gradle properties.
// This will throw an error if it is flagged as 'true' and those properties are non-existent.
boolean isRelease() { project.hasProperty("release_flag") }

uploadArchives {
    if (isRelease()) {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.artifactId = POM_ARTIFACT_ID
                println(pom.artifactId)

                repository(url: isRelease() ?
                        "https://oss.sonatype.org/service/local/staging/deploy/maven2/" :
                        mavenLocal().url) {
                    authentication(
                            userName: project.findProperty('sonatype_user'),
                            password: project.findProperty('sonatype_pass'))
                }

                snapshotRepository(url: isRelease() ?
                        "https://oss.sonatype.org/content/repositories/snapshots" :
                        mavenLocal().url) {
                    authentication(
                            userName: project.findProperty('sonatype_user'),
                            password: project.findProperty('sonatype_pass'))
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                            email POM_DEVELOPER_EMAIL
                            organization POM_DEVELOPER_ORGANIZATION
                            organizationUrl POM_DEVELOPER_ORGANIZATION_URL
                        }
                    }
                }
            }
        }
    }
}

signing {
    required { isRelease() }
    if (isRelease()) {
        allprojects { ext."signing.keyId" = project.findProperty('keyId') }
        allprojects { ext."signing.secretKeyRingFile" = project.findProperty('secretKeyRingFile') }
        allprojects { ext."signing.password" = project.findProperty('password') }

        sign configurations.archives
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives sourcesJar
}